"use client"
import Head from "next/head";
import { useState } from "react";
import React from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
// import Home from './Home'
import { Auth } from "../component/utilscomp";
import { useRouter } from "next/navigation"
import Homecomp from "../component/Homecomp";
import { useContext } from "react";
import { dataContext } from "@/contextapi/dataContext";
export type returntype={
  username: string; password: string;
}
export default function Home() {
  const router=useRouter()
  const {resultrole,setResultrole,data,setData}=useContext(dataContext)
  const schema = yup.object().shape({
    username: yup.string()
                .required("username is valid")
                .min(4, "Mininum 4 characters")
                .max(15, "Maximum 15 characters")
                ,
    password: yup
      .string()
      .required("password is valid")
      .min(4, "password must be more than 4 characters")
      .max(32, "password must be less than 32 characters")
      
  });
  
// router.push('/')
  const {
    setError,
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<returntype>({
    resolver: yupResolver(schema),
  });
  // type dataType={
  //   dob:string,
  //     gender:string,
  //     location:string,
  //     role:string,
  //     response:string
  // }
  // const dataValue={
  //   dob:"",
  //     gender:"",
  //     location:"",
  //     role:"",
  //     response:""
  // }
  // const [resultrole, setResultrole] = useState('');
  // const [data, setData] = useState<dataType>(dataValue);
  const [username, setUsername] = useState("nubul");
  const [password, setPassword] = useState("nubul123");
  
  const submit:SubmitHandler<returntype> = async (formData:returntype) => 
    {
      
  const res = await Auth(formData)
  if(res.response==='ok')
    { 
      localStorage.setItem('persondata',JSON.stringify(res))
      setData(JSON.parse(localStorage.getItem('persondata') || '{}'))
      // console.log(data);
      
      setResultrole(res.role)
    }else if(res.response==='not ok'){
      if(res.passwordvalid==='yes')
        {setError("password",{type:"custom",message:"password is incorrect"})
        setPassword('')
      }
      else if(res.usernamevalid==='yes')
        {setError("username",{type:"custom",message:"username is incorrect"})
        setUsername('')
      }else{
      setError("password",{type:"custom",message:"password is incorrect"})
      setError("username",{type:"custom",message:"username is incorrect"})
      setPassword('')
      setUsername('')
      }
    }
}


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

            {resultrole && router.push('./homepage') || <div
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            width: "100vw",
            height: "100vh",
          }}
        >
          <div style={{ width: 400, height: 400 }}>
            <form onSubmit={handleSubmit(submit)}>
              <h1 className="h3 mb-3 fw-normal">Please sign in</h1>
              <div className="form-floating">
                <input
                  type="text"
                  className="form-control"
                  value={username}
                  {...register("username")}
                  onChange={(e) => setUsername(e.target.value)}
                  id="floatingInput"
                  placeholder="abcxyz"
                />
                <label htmlFor="floatingInput">Username</label>
                {errors.username?.message && (
                  <p style={{ color: "red" }}>{errors.username?.message}</p>
                )}
              </div>
              <div className="form-floating">
                <input
                  type="password"
                  className="form-control"
                  value={password}
                  {...register("password")}
                  onChange={(e) => setPassword(e.target.value)}
                  id="floatingPassword"
                  placeholder="Password"
                />
                <label htmlFor="floatingPassword">Password</label>
                {errors.password?.message && (
                  <p style={{ color: "red" }}>{ errors.password?.message || "password is incorrect"}</p>
                )}
              </div>

              <div className="form-check text-start my-3"></div>
              <button className="btn btn-primary w-100 py-2" type="submit">
                Sign in
              </button>
            </form>
          </div>
        </div>}
      </main>
    </>
  );
}
